#include<stdio.h>
#include<stdlib.h>
#define OK 1
#define ERROR 0
#define TRUE 1
#define FALSE 0
#define OVERFLOW 3
typedef int ElemType;
typedef int Status;

typedef int VRType;
typedef char InfoType;
typedef int VertexType;

#define INFINITY INT_MAX
#define MAX_VERTEX_NUM 20  //最大顶点数
typedef enum{DG,DN,UDG,UDN}GraphKind;//有向图，有向网，无向图，无向网
typedef struct ArcCell{
	VRType adj;//无权图：0 1。带权图：权值 无穷。------
	InfoType *info;//弧上的附加信息
}ArcCell, AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];
typedef struct{
	VertexType vexs[MAX_VERTEX_NUM];//顶点向量  
	AdjMatrix arcs;//邻接矩阵  ------
	int vexnum, arcnum;//顶点数 弧数
	GraphKind Kind;
}MGraph;

Status CreateGraph(MGraph &G){
	scanf("%d", G.Kind);
	switch (G.Kind){
		case DG:return CreateDG(G);
		case DN:return CreateDN(G);
		case UDG:return CreateUDG(G);
		case UDN:return CreateUDN(G);
		default:return ERROR;
	}
}

Status CreateUDN(MGraph &G){//无向网
	int IncInfo;
	scanf("%d %d %d", &G.vexnum, &G.arcnum, &IncInfo);
	for (int i = 0; i < G.vexnum; i++) scanf("%d",&G.vexs[i]);//顶点向量  
	for (int i = 0; i < G.vexnum; i++){
		for (int j = 0; j < G.vexnum; j++){
			G.arcs[i][j] = {INFINITY ,NULL};
		}
	}

	for (int k = 0; k < G.arcnum; k++){
		VertexType v1, v2;
		int w;
		scanf("%d %d %d", &v1, &v2,&w);//一条边的顶点 权值
		int i = LocateVex(G, v1);//确定点v1,v2在G中位置
		int j = LocateVex(G, v2);

		G.arcs[i][j].adj = w;
		if (IncInfo) Input(*G.arcs[i][j].info);//书上这么写的
		G.arcs[j][i] = G.arcs[i][j];
	}
	return OK;
}

