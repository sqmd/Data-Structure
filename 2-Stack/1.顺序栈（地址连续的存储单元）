#include<stdio.h>
#include<stdlib.h>

#define OK 1
#define ERROR 0
#define TRUE 1
#define FALSE 0
#define OVERFLOW -1
typedef int SElemType;
typedef int Status;

#define STACK_INIT_SIZE 100
#define STACKINCREMENT 10
typedef struct{
	SElemType *base;
	SElemType *top;
	int stacksize;//当前已分配的存储空间，以元素为单位---
}SqStack;

//构造空栈
Status InitStack(SqStack &S){
	S.base = (SElemType *)malloc(sizeof(SElemType)*STACK_INIT_SIZE);
	if (!S.base) exit(OVERFLOW);
	S.top = S.base;//
	S.stacksize = STACK_INIT_SIZE;//
	return OK;
}

Status GetTop(SqStack S, SElemType &e){
	if (S.base == S.top) return ERROR;
	e = *(S.top-1);
	return OK;
}

//插入
Status push(SqStack &S, SElemType e){
	if (S.top - S.base >= S.stacksize){
		S.base = (SElemType *)realloc(S.base, sizeof(SElemType)*(S.stacksize+ STACKINCREMENT));
		if (!S.base) exit(OVERFLOW);

		S.top = S.base + S.stacksize;
		S.stacksize +=STACKINCREMENT;
	}

	*S.top++= e;
	return OK;
}

//删除
Status Pop(SqStack &S, SElemType &e){
	if (S.base == S.top) return ERROR;
	e = *--S.top;
	return OK;
}
