#include<stdio.h>
#include<stdlib.h>
#define OK 1
#define ERROR 0
#define TRUE 1
#define FALSE 0
#define OVERFLOW 3
typedef int QElemType;
typedef int Status;

typedef struct QNode{
	QElemType data;
	struct QNode *next;
}QNode,*QueuePtr;

typedef struct{
	QueuePtr front;//队头指针
	QueuePtr rear;//队尾指针
}LinkQueue;

Status InitQueue(LinkQueue Q){
	Q.front = Q.rear = (QueuePtr)malloc(sizeof(QNode));
	if (!Q.front) exit(OVERFLOW);	 
	Q.front->next = NULL;
	return OK;
}

Status DestroyQueue(LinkQueue &Q){
	while (Q.front){
		Q.rear = Q.front->next;//QueuePtr q = Q.front->next;
		free(Q.front);//p->next = NULL;
		Q.front = Q.rear;//Q.front = q;
	}
	return OK;
}

//插入e
Status EnQueue(LinkQueue &Q, QElemType e){
	QueuePtr p = (QueuePtr)malloc(sizeof(QNode));
	if (!p) exit(OVERFLOW);
	p->data = e;
	p->next = NULL;

	Q.rear->next = p;
	Q.rear = p;
	return OK;
}

//删除 有头结点
Status DeQueue(LinkQueue &Q, QElemType &e){
	if (Q.front == Q.rear) return ERROR;
	QueuePtr p = Q.front->next;
	e = p->data;
	Q.front->next = p->next;
	if (Q.rear == p) Q.rear = Q.front;
	free(p);
	return OK;
}
