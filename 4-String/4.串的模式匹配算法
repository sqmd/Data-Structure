#include<stdio.h>
#include<stdlib.h>

#define OK 1
#define ERROR 0
#define TRUE 1
#define FALSE 0
#define OVERFLOW 3
typedef int ElemType;
typedef int Status;

#define MAXSTRLEN 255
typedef unsigned char SString[MAXSTRLEN + 1];//SString[0]存放串的长度

//返回子串T：在S中，第pos个字符之后的位置   从第pos个字符起
int index(SString S, SString T, int pos){
	int i = pos;
	int j = 1;
	while (i <= S[0] && j <= T[0]){
		if (S[i] == T[j]){ 
			++i; 
			++j; 
		}else{ 
			i = i - j + 2; //
			j = 1; 
		}
	}
	if (j > T[0]) return i - T[0];
	else return 0;
}

//-------------------模式匹配的一种改进算法：KMP算法---------------------------------
//https://www.cnblogs.com/yjiyjige/p/3263858.html
//next[j] = k，表示当T[i] != P[j]时，j指针的下一个位置。
int Index_KMP(SString S, SString T, int pos){
	int i = pos;
	int j = 1;
	while (i<=S[0]&&j<=T[0]){
		if (j==0||S[i]=T[j]){
			++i;
			++j;
		}
		else 	j = next[j];
	}
	if (j > T[0])return i - T[0];
	else return 0;
}

void get_next(SString T, int next[]){
	int i = 1;
	next[1] = 0;
	int j = 0;
	while (i < T[0]){
		if (j == 0 || T[i] == T[j]){
			++i;
			++j;
			next[i] = j;
		}else{
			j = next[j];
		}
	}
}

//再改进缺陷  修正next[]，存入nextval[]
void get_nextval(SString T, int nextval[]){
	int i = 1;
	nextval[1] = 0;
	int j=0;
	while (i < T[0]){
		if (j == 0 || T[i] == T[j]){
			++i;
			++j;
			if (T[i] != T[j]) nextval[i] = j;
			else nextval[i] = nextval[j];
		}
		else j = nextval[j];
	}
}
