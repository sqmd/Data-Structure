#include<stdio.h>
#include<stdlib.h>

#define OK 1
#define ERROR 0
#define TRUE 1
#define FALSE 0
#define OVERFLOW 3
typedef int ElemType;
typedef int Status;

typedef struct{
	char *ch;
	int length;
}HString;

//生成串T，T=chars[ ]
Status StrAssign(HString &T, char *chars){
	if (T.ch) free(T.ch);

	int i;
	for (char *c = chars,i = 0; *c; i++, c++);

	if (!i){ T.ch = NULL; T.length = 0; }
	else{
		T.ch = (char *)malloc(i*sizeof(char));
		if (!T.ch) exit(OVERFLOW);

		for (int j = 0; j < i; j++) T.ch[j] = chars[j];//T.ch = chars;
		T.length = i;
	}	
	return OK;
}

int StrLength(HString S){
	return S.length;
}

int StrCompare(HString S, HString T){
	for (int i = 0; i < S.length&&i < T.length; i++){
		if (S.ch[i] != T.ch[i]) return S.ch[i]-T.ch[i];
	}
	return S.length-T.length;
	/*
	如果第一个字符和参数的第一个字符相等,则以第二个字符和参数的第二个字符做比较,以此类推,
	直至比较的字符或被比较的字符有一方全比较完,这时就比较字符的长度.-----------------------------------
	*/
}

//将S清为空串
Status ClearString(HString &S){//----------
	if (S.ch){ 
		free(S.ch); 
		S.ch = NULL;	
	}
	S.length = 0;
	return OK;
}

Status ConCat(HString &T, HString S1, HString S2){
	if (T.ch) free(T.ch);

	T.ch = (char *)malloc(sizeof(char)*(S1.length + S2.length));
	if (!T.ch) exit(OVERFLOW);
	T.length = S1.length + S2.length;

	for (int i = 0; i < S1.length; i++) T.ch[i] = S1.ch[i];
	for (int i = 0; i < S2.length; i++) T.ch[i + S1.length] = S2.ch[i];
	return OK;
}

//Sub：S的第pos个字符起，长度为len的子串
Status SubString(HString &Sub, HString S, int pos, int len){
	if (pos<1 || pos>S.length || len < 0 || len + pos - 1>S.length) return ERROR;

	//if (!S.ch)return ERROR;
	if (Sub.ch) free(Sub.ch); 
	if (!len){
		Sub.ch = NULL;
		Sub.length = 0;
	}else{
		if (!(Sub.ch = (char*)malloc(sizeof(char)*len))) exit(OVERFLOW);
		for (int i = pos - 1; i <pos + len - 1; i++){
			*(Sub.ch++) = S.ch[i];//书上为Sub.ch[0 .. len-1]=S.ch[pos - 1 .. pos+len-2] ......................*(Sub.ch++)   can??.............................
		}
		Sub.length = len;
	}
	return OK;
}
