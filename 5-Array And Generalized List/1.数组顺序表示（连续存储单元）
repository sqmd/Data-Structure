#include<stdio.h>
#include<stdlib.h>
#include<stdarg.h>

#define OK 1
#define ERROR 0
#define TRUE 1
#define FALSE 0
#define OVERFLOW 3
#define UNDERFLOW 4
typedef int ElemType;
typedef int Status;

//https://www.cnblogs.com/kangjianwei101/p/5227234.html
#define MAX_ARRAY_DIM 8
typedef struct{
	ElemType *base;
	int dim;//维数
	int *bounds;//数组维界基址
	int *constants;//数组映像函数常量基址
}Array;

Status InitArray(Array &A, int dim, ...){
	//A.dim
	if (dim<1 || dim>MAX_ARRAY_DIM) return ERROR;
	A.dim = dim;

	//A.bound----------
	A.bounds = (int *)malloc(dim*sizeof(int));
	if (!A.bounds) exit(OVERFLOW);
	int elemtotal = 1;//A元素总数

	va_list ap;
	va_start(ap, dim);//https://blog.csdn.net/u011192270/article/details/50255847
	for (int i = 0; i < dim; i++){
		A.bounds[i] = va_arg(ap, int);
		if (A.bounds[i] < 0) return UNDERFLOW;
		elemtotal += A.bounds[i];
	}
	va_end(ap);

	//A.base
	A.base = (ElemType *)malloc(elemtotal*sizeof(ElemType));
	if (!A.base) exit(OVERFLOW);

	//A.constants----------  假设数组维度为2，则constants存储移动每一行、每一列所需跨越的元素个数
	A.constants = (int *)malloc(dim*sizeof(int));
	if (!A.constants) exit(OVERFLOW);
	A.constants[dim - 1] = 1;
	for (int i = dim - 2; i >= 0; --i)
		A.constants[i] = A.bounds[i + 1] * A.constants[i + 1];
	return OK;
}

Status DestoryArray(Array &A){
	if (!A.base) return ERROR;
	free(A.base); A.base = NULL;

	if (!A.bounds) return ERROR;
	free(A.bounds); A.bounds = NULL;

	if (!A.constants) return ERROR;
	free(A.constants); A.constants = NULL;
	return OK;
}

//由ap指示dim维下标值，给出地址off
Status Locate(Array A, va_list ap, int &off){
	off = 0;
	for (int i = 0; i < A.dim; i++){
		int ind = va_arg(ap, int);
		if (ind < 0 || ind >= A.bounds[i]) return OVERFLOW;
		off += A.constants[i] * ind;
	}
	return OK;
}

//...为n个下标值，把元素放在e中
Status Value(Array A, ElemType &e, ...){
	int off;
	Status result;
	va_list ap;
	va_start(ap, e);	
	if ((result = Locate(A, ap, off)) <= 0) return result;
	e = *(A.base + off);
	return OK;
}

//...为n个下标值，把e的值赋给A
Status Assign(Array &A, ElemType e, ...){
	int off;
	Status result;
	va_list ap;

	va_start(ap, e);
	if ((result = Locate(A, ap, off)) <= 0) return result;
	*(A.base + off) = e;
	return OK;
}



